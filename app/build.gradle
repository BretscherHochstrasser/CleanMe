apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "ch.bretscherhochstrasser.cleanme"
        minSdkVersion 15
        targetSdkVersion 29
        versionName "0.7.0"
        versionCode versionCodeFromName(versionName)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding = true
    }

    signingConfigs {
        release {
            if (findProperty("cleanme.signingConfig.release.storeFile")) {
                storeFile = file(findProperty("cleanme.signingConfig.release.storeFile"))
                storePassword = findProperty("cleanme.signingConfig.release.storePassword")
                keyAlias = findProperty("cleanme.signingConfig.release.keyAlias")
                keyPassword = findProperty("cleanme.signingConfig.release.keyPassword")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    sourceSets {
        String sharedTestDir = 'src/testShared/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "cleanme-${variant.versionName}-${variant.name}.apk"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    implementation 'com.google.android.material:material:1.2.0-beta01'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.3'
    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-service:2.2.0'

    implementation 'com.github.stephanenicolas.toothpick:ktp:3.1.0'
    implementation 'com.github.stephanenicolas.toothpick:smoothie-lifecycle-ktp:3.1.0'
    kapt 'com.github.stephanenicolas.toothpick:toothpick-compiler:3.1.0'

    implementation 'com.mikhaellopez:circularfillableloaders:1.3.2'
    implementation 'com.mikhaellopez:circularprogressbar:3.0.3'

    implementation 'com.stephentuso:welcome:1.4.1'

    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test:core-ktx:1.2.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    testImplementation 'org.mockito:mockito-inline:3.3.3'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'com.github.stephanenicolas.toothpick:toothpick-testing-junit4:3.1.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:core-ktx:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.25.1'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    androidTestImplementation 'com.github.stephanenicolas.toothpick:toothpick-testing-junit4:3.1.0'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'

}

static def versionCodeFromName(String versionName) {
    // parse version name "1.2.3-beta" to [2,5,6]
    def parsed = versionName.split('-')[0].split('\\.')
    // assemble code integer as 20506
    return parsed[0].toInteger() * 10000 +
            parsed[1].toInteger() * 100 +
            parsed[2].toInteger()
}
